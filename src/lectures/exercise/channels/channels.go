//--Summary:
//  Create a program that utilizes goroutines to run the provided calculation
//  function on a number of jobs. The results from the goroutines must be
//  communicated back to the main thread using a channel, and then added
//  together.
//
//--Requirements:
//* Run `longCalculation` for each job generated by the `makeJobs` function
//* Each job must be run in a separate goroutine
//* The result from `longCalculation` must be provided to the main function
//  using a channel
//* Sum the results from each job to generate a final result, and print it
//  to the terminal

package main

import (
	"fmt"
	"math/rand"
	"time"
)

type Job int

const (
	DoExit = iota
	ExitOk
)

type Result struct {
	data int
	job  Job
}

type MessageResponse int

func longCalculation(i Job) int {
	duration := time.Duration(rand.Intn(1000)) * time.Millisecond
	time.Sleep(duration)
	fmt.Printf("Job %d complete in %v\n", i, duration)
	return int(i) * 30
}

func makeJobs() []Job {
	jobs := make([]Job, 0, 100)
	for i := 0; i < 100; i++ {
		jobs = append(jobs, Job(rand.Intn(10000)))
	}
	return jobs
}

func calculate(job <-chan Job, result chan<- Result, message chan MessageResponse) {
	for {
		select {
		case m := <-message:
			switch m {
			case DoExit:
				fmt.Println("Exit goroutine")
				message <- ExitOk
				return
			default:
				panic("unhandled control message")
			}
		case j := <-job:
			calculated := longCalculation(j)
			result <- Result{calculated, j}
		}
	}
}

func main() {
	jobs := makeJobs()
	jobsChan := make(chan Job, len(jobs))
	resultsChan := make(chan Result, len(jobs))
	controlChan := make(chan MessageResponse)

	rand.Seed(time.Now().UnixNano())

	go calculate(jobsChan, resultsChan, controlChan)

	for _, item := range jobs {
		jobsChan <- item
	}

	for {
		select {
		case result := <-resultsChan:
			fmt.Println(result)
		case <-time.After(500 * time.Microsecond):
			fmt.Println("time out")
			controlChan <- DoExit
			<-controlChan
			fmt.Println("program exit")
			return

		}
	}
}
